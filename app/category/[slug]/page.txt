import Link from "next/link"
import Image from "next/image"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { MapPin, Star, TrendingUp, ChevronRight } from "lucide-react"
import { getCategoryBySlug, CategoryDTO } from "@/controllers/categories"
import { getProductsByCategory } from "@/controllers/products"

interface CategoryPageProps {
  params: { slug: string } | Promise<{ slug: string }>
}

export default async function CategoryPage({ params }: CategoryPageProps) {
  // Await params if they are a Promise
  const { slug } = await params

  // Fetch category and its products server-side
  const category: CategoryDTO | null = await getCategoryBySlug(slug)
  if (!category) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-800 mb-4">Category Not Found</h1>
          <p className="text-gray-600 mb-8">The category you&apos;re looking for doesn&apos;t exist.</p>
          <Button asChild>
            <Link href="/marketplace">Back to Marketplace</Link>
          </Button>
        </div>
      </div>
    )
  }

  // Fetch all products in this category (optionally filter by subcategory)
  const products = await getProductsByCategory(category.id)

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-6">
        {/* Category Header */}
        <div className="mb-8 flex items-center gap-3">
          {category.icon && <span className="text-4xl">{category.icon}</span>}
          <div>
            <h1 className="text-3xl font-bold text-gray-800">{category.name}</h1>
            <p className="text-gray-600">{category.description}</p>
          </div>
        </div>

        {/* Subcategories Grid */}
        {category.subcategories?.length > 0 && (
          <div className="mb-8">
            <h2 className="text-xl font-bold text-gray-800 mb-6">Browse Subcategories</h2>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
              {category.subcategories.map(sub => (
                <Card key={sub.id} className="hover:shadow-lg transition-shadow">
                  <CardContent className="p-4 text-center">
                    <Image
                      src={sub.image || "/placeholder.svg"}
                      alt={sub.name}
                      width={120}
                      height={120}
                      className="w-full h-24 object-cover rounded-lg mb-3"
                    />
                    <h3 className="font-semibold text-gray-800 mb-2">{sub.name}</h3>
                    <p className="text-sm text-gray-600 mb-3">{sub.description}</p>
                    <Badge variant="secondary" className="bg-green-100 text-green-800">
                      {sub.productCount} products
                    </Badge>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}

        {/* Products Grid */}
        <h2 className="text-xl font-bold text-gray-800 mb-6">Products</h2>
        {products.length === 0 ? (
          <p className="text-gray-600">No products available in this category yet.</p>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {products.map(product => (
              <Card key={product._id} className="hover:shadow-lg transition-shadow">
                <CardContent className="p-0">
                  <Link href={`/product/${product._id}`}>
                    <div className="relative">
                      <Image
                        src={product.images?.[0] || "/placeholder.svg"}
                        alt={product.name}
                        width={300}
                        height={200}
                        className="w-full h-48 object-cover rounded-t-lg"
                      />
                      {product.boosted && (
                        <Badge className="absolute top-2 left-2 bg-orange-500">
                          <TrendingUp className="w-3 h-3 mr-1" /> Boosted
                        </Badge>
                      )}
                    </div>
                    <div className="p-4">
                      <h3 className="font-semibold text-gray-800 mb-2 line-clamp-2">{product.name}</h3>
                      <p className="text-2xl font-bold text-green-600 mb-2">
                        â‚¦{product.price.toLocaleString()}
                      </p>
                      <div className="flex items-center text-sm text-gray-600 mb-2">
                        <MapPin className="w-4 h-4 mr-1" /> {product.location}
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-600">{product.seller?.username || "Seller"}</span>
                        <div className="flex items-center">
                          <Star className="w-4 h-4 text-yellow-400 fill-current mr-1" />
                          <span className="text-sm">{product.seller?.rating || 0}</span>
                        </div>
                      </div>
                    </div>
                  </Link>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  )
}
